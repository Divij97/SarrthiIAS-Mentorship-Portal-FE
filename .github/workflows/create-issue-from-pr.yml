name: Create Issue from PR

on:
  pull_request:
    types: [opened, reopened]

jobs:
  create-issue:
    runs-on: ubuntu-latest
    # Only run if branch name doesn't contain 'issue-' prefix
    if: ${{ !contains(github.head_ref, 'issue-') }}
    steps:
      - name: Create Issue and Link to Project
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.PAT }}
          script: |
            const prTitle = context.payload.pull_request.title;
            const prBody = context.payload.pull_request.body || '';
            const prNumber = context.payload.pull_request.number;
            
            // Create the issue with a reference to the PR
            const issue = await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: prTitle,
              body: `This issue was automatically created from PR #${prNumber}\n\n${prBody}`,
              labels: ['from-pr']
            });
            
            // Link the PR to the issue using GitHub's built-in syntax
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: prNumber,
              body: `Created and linked to issue #${issue.data.number}`
            });
            
            // Add a PR reference comment in the issue
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: issue.data.number,
              body: `Connected to PR #${prNumber}`
            });
            
            // Add issue to project
            const query = `
              mutation($projectId: ID!, $contentId: ID!) {
                addProjectV2ItemById(input: {
                  projectId: $projectId
                  contentId: $contentId
                }) {
                  item {
                    id
                  }
                }
              }
            `;
            
            const projectId = "PVT_kwHOAXdMoc4AyjOk";
            
            try {
              const result = await github.graphql(query, {
                projectId: projectId,
                contentId: issue.data.node_id,
                headers: {
                  'GraphQL-Features': 'projects_next_graphql',
                }
              });
              
              // Update status to "In Progress"
              const updateStatusQuery = `
                mutation($projectId: ID!, $itemId: ID!, $fieldId: ID!, $optionId: String!) {
                  updateProjectV2ItemFieldValue(input: {
                    projectId: $projectId
                    itemId: $itemId
                    fieldId: $fieldId
                    value: { 
                      singleSelectOptionId: $optionId
                    }
                  }) {
                    projectV2Item {
                      id
                    }
                  }
                }
              `;
              
              await github.graphql(updateStatusQuery, {
                projectId: projectId,
                itemId: result.addProjectV2ItemById.item.id,
                fieldId: "PVTSSF_lAHOAXdMoc4AyjOkzgofBUw",
                optionId: "47fc9ee4",
                headers: {
                  'GraphQL-Features': 'projects_next_graphql',
                }
              });
              
              console.log(`Issue #${issue.data.number} created and added to project`);
            } catch (error) {
              console.log('Error adding to project:', error);
            } 